{"version":3,"file":"cancelable-promise-helpers.js","sources":["../../src/-private/cancelable-promise-helpers.js"],"sourcesContent":["import { assert } from '@ember/debug';\nimport RSVP, { Promise } from 'rsvp';\nimport { TaskInstance } from './task-instance';\nimport { cancelableSymbol, Yieldable } from './external/yieldables';\n\n/**\n * A cancelation-aware variant of [Promise.all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).\n * The normal version of a `Promise.all` just returns a regular, uncancelable\n * Promise. The `ember-concurrency` variant of `all()` has the following\n * additional behavior:\n *\n * - if the task that `yield`ed `all()` is canceled, any of the\n *   {@linkcode TaskInstance}s passed in to `all` will be canceled\n * - if any of the {@linkcode TaskInstance}s (or regular promises) passed in reject (or\n *   are canceled), all of the other unfinished `TaskInstance`s will\n *   be automatically canceled.\n *\n * [Check out the \"Awaiting Multiple Child Tasks example\"](/docs/examples/joining-tasks)\n */\nexport const all = taskAwareVariantOf(RSVP.Promise, 'all', identity);\n\n/**\n * A cancelation-aware variant of [RSVP.allSettled](https://api.emberjs.com/ember/release/functions/rsvp/allSettled).\n * The normal version of a `RSVP.allSettled` just returns a regular, uncancelable\n * Promise. The `ember-concurrency` variant of `allSettled()` has the following\n * additional behavior:\n *\n * - if the task that `yield`ed `allSettled()` is canceled, any of the\n *   {@linkcode TaskInstance}s passed in to `allSettled` will be canceled\n */\nexport const allSettled = taskAwareVariantOf(RSVP, 'allSettled', identity);\n\n/**\n * A cancelation-aware variant of [Promise.race](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race).\n * The normal version of a `Promise.race` just returns a regular, uncancelable\n * Promise. The `ember-concurrency` variant of `race()` has the following\n * additional behavior:\n *\n * - if the task that `yield`ed `race()` is canceled, any of the\n *   {@linkcode TaskInstance}s passed in to `race` will be canceled\n * - once any of the tasks/promises passed in complete (either success, failure,\n *   or cancelation), any of the {@linkcode TaskInstance}s passed in will be canceled\n *\n * [Check out the \"Awaiting Multiple Child Tasks example\"](/docs/examples/joining-tasks)\n */\nexport const race = taskAwareVariantOf(Promise, 'race', identity);\n\n/**\n * A cancelation-aware variant of [RSVP.hash](https://api.emberjs.com/ember/release/functions/rsvp/hash).\n * The normal version of a `RSVP.hash` just returns a regular, uncancelable\n * Promise. The `ember-concurrency` variant of `hash()` has the following\n * additional behavior:\n *\n * - if the task that `yield`ed `hash()` is canceled, any of the\n *   {@linkcode TaskInstance}s passed in to `hash` will be canceled\n * - if any of the items rejects/cancels, all other cancelable items\n *   (e.g. {@linkcode TaskInstance}s) will be canceled\n */\nexport const hash = taskAwareVariantOf(RSVP, 'hash', getValues);\n\n/**\n * A cancelation-aware variant of [RSVP.hashSettled](https://api.emberjs.com/ember/release/functions/rsvp/hashSettled).\n * The normal version of a `RSVP.hashSettled` just returns a regular, uncancelable\n * Promise. The `ember-concurrency` variant of `hashSettled()` has the following\n * additional behavior:\n *\n * - if the task that `yield`ed `hashSettled()` is canceled, any of the\n *   {@linkcode TaskInstance}s passed in to `hashSettled` will be canceled\n */\nexport const hashSettled = taskAwareVariantOf(RSVP, 'hashSettled', getValues);\n\nfunction identity(obj) {\n  return obj;\n}\n\nfunction getValues(obj) {\n  return Object.keys(obj).map((k) => obj[k]);\n}\n\nfunction castForPromiseHelper(castable) {\n  if (castable) {\n    if (castable instanceof TaskInstance) {\n      // Mark TaskInstances, including those that performed synchronously and\n      // have finished already, as having their errors handled, as if they had\n      // been then'd, which this is emulating.\n      castable.executor.asyncErrorsHandled = true;\n    } else if (castable instanceof Yieldable) {\n      // Cast to promise\n      return castable._toPromise();\n    }\n  }\n\n  return castable;\n}\n\nfunction castAwaitables(arrOrHash, callback) {\n  if (Array.isArray(arrOrHash)) {\n    return arrOrHash.map(callback);\n  } else if (typeof arrOrHash === 'object' && arrOrHash !== null) {\n    let obj = {};\n    Object.keys(arrOrHash).forEach((key) => {\n      obj[key] = callback(arrOrHash[key]);\n    });\n    return obj;\n  } else {\n    // :shruggie:\n    return arrOrHash;\n  }\n}\n\nfunction taskAwareVariantOf(obj, method, getItems) {\n  return function (awaitable) {\n    let awaitables = castAwaitables(awaitable, castForPromiseHelper);\n\n    let items = getItems(awaitables);\n    assert(`'${method}' expects an array.`, Array.isArray(items));\n\n    let defer = RSVP.defer();\n\n    obj[method](awaitables).then(defer.resolve, defer.reject);\n\n    let hasCancelled = false;\n    let cancelAll = () => {\n      if (hasCancelled) {\n        return;\n      }\n      hasCancelled = true;\n      items.forEach((it) => {\n        if (it) {\n          if (it instanceof TaskInstance) {\n            it.cancel();\n          } else if (typeof it[cancelableSymbol] === 'function') {\n            it[cancelableSymbol]();\n          }\n        }\n      });\n    };\n\n    let promise = defer.promise.finally(cancelAll);\n    promise[cancelableSymbol] = cancelAll;\n    return promise;\n  };\n}\n"],"names":["all","taskAwareVariantOf","RSVP","Promise","identity","allSettled","race","hash","getValues","hashSettled","obj","Object","keys","map","k","castForPromiseHelper","castable","TaskInstance","executor","asyncErrorsHandled","Yieldable","_toPromise","castAwaitables","arrOrHash","callback","Array","isArray","forEach","key","method","getItems","awaitable","awaitables","items","assert","defer","then","resolve","reject","hasCancelled","cancelAll","it","cancel","cancelableSymbol","promise","finally"],"mappings":"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"}