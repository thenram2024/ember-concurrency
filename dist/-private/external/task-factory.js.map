{"version":3,"file":"task-factory.js","sources":["../../../src/-private/external/task-factory.js"],"sourcesContent":["import Scheduler from './scheduler/scheduler';\nimport UnboundedSchedulerPolicy from './scheduler/policies/unbounded-policy';\nimport EnqueueSchedulerPolicy from './scheduler/policies/enqueued-policy';\nimport DropSchedulerPolicy from './scheduler/policies/drop-policy';\nimport KeepLatestSchedulerPolicy from './scheduler/policies/keep-latest-policy';\nimport RestartableSchedulerPolicy from './scheduler/policies/restartable-policy';\nimport { Task } from './task/task';\nimport { TaskGroup } from './task/task-group';\nimport { DEFAULT_ENVIRONMENT } from './environment';\n\nfunction assertModifiersNotMixedWithGroup(obj) {\n  if (obj._hasSetConcurrencyConstraint && obj._taskGroupPath) {\n    throw new Error(\n      `Cannot use both 'group' and other concurrency-constraining task modifiers (e.g. 'drop', 'enqueue', 'restartable')`,\n    );\n  }\n}\n\nfunction assertUnsetBufferPolicy(obj) {\n  if (obj._hasSetBufferPolicy) {\n    throw new Error(\n      `Cannot set multiple buffer policies on a task or task group. ${obj._schedulerPolicyClass} has already been set for task or task group '${obj.name}'`,\n    );\n  }\n}\n\nconst MODIFIER_REGISTRY = {\n  enqueue: (factory, value) =>\n    value && factory.setBufferPolicy(EnqueueSchedulerPolicy),\n  evented: (factory, value) => value && factory.setEvented(value),\n  debug: (factory, value) => value && factory.setDebug(value),\n  drop: (factory, value) =>\n    value && factory.setBufferPolicy(DropSchedulerPolicy),\n  group: (factory, groupName) => factory.setGroup(groupName),\n  keepLatest: (factory, value) =>\n    value && factory.setBufferPolicy(KeepLatestSchedulerPolicy),\n  maxConcurrency: (factory, maxConcurrency) =>\n    factory.setMaxConcurrency(maxConcurrency),\n  onState: (factory, onStateCallback) => factory.setOnState(onStateCallback),\n  restartable: (factory, value) =>\n    value && factory.setBufferPolicy(RestartableSchedulerPolicy),\n};\n\n/**\n * Callback type defining a task modifier\n *\n * @callback TaskFactory~TaskModifier\n * @param {TaskFactory} factory\n * @param {*} taskModifierOption\n */\n\n/**\n * Registers a new modifier with the modifier registry\n *\n * @param {string} name Name of the modifier\n * @param {TaskFactory~TaskModifier} callback\n */\nexport function registerModifier(name, callback) {\n  if (MODIFIER_REGISTRY[name]) {\n    throw new Error(\n      `A modifier with the name '${name}' has already been defined.`,\n    );\n  }\n\n  MODIFIER_REGISTRY[name] = callback;\n}\n\n/**\n * Returns a specified modifier, if it exists in the registry\n *\n * @param {string} name Name of the modifier\n * @returns {TaskFactory~TaskModifier?}\n */\nexport function getModifier(name) {\n  return MODIFIER_REGISTRY[name];\n}\n\n/**\n * Returns whether a specified modifier exists in the registry\n *\n * @param {string} name Name of the modifier\n * @returns {boolean}\n */\nexport function hasModifier(name) {\n  return name in MODIFIER_REGISTRY;\n}\n\n/**\n * Factory used for instantiating Tasks and Task Groups. Mostly for internal\n * use, but some public APIs exposed via the Task Modifier APIs.\n *\n * <style>\n *  .ignore-this--this-is-here-to-hide-constructor,\n *  #TaskFactory { display: none }\n * </style>\n *\n * @class TaskFactory\n */\nexport class TaskFactory {\n  env = DEFAULT_ENVIRONMENT;\n\n  _debug = null;\n  _enabledModifiers = [];\n  _hasSetConcurrencyConstraint = false;\n  _hasSetBufferPolicy = false;\n  _hasEnabledEvents = false;\n  _maxConcurrency = null;\n  _onStateCallback = (state, taskable) => taskable.setState(state);\n  _schedulerPolicyClass = UnboundedSchedulerPolicy;\n  _taskGroupPath = null;\n\n  constructor(name = '<unknown>', taskDefinition = null, options = {}) {\n    this.name = name;\n    this.taskDefinition = taskDefinition;\n    this.options = options;\n    this._processModifierOptions(options);\n  }\n\n  /**\n   * Returns a new Task bound to the given context\n   *\n   * @protected\n   * @param {*} context\n   * @returns {Task}\n   */\n  createTask(context) {\n    let options = this.getTaskOptions(context);\n\n    return new Task(\n      Object.assign(\n        {\n          generatorFactory: (args) => this.taskDefinition.apply(context, args),\n        },\n        options,\n      ),\n    );\n  }\n\n  /**\n   * Returns a new TaskGroup bound to the given context\n   *\n   * @protected\n   * @param {*} context\n   * @returns {Task}\n   */\n  createTaskGroup(context) {\n    let options = this.getTaskOptions(context);\n\n    return new TaskGroup(options);\n  }\n\n  /**\n   * Returns a modifier callback with the given name bound to this TaskFactory,\n   * if registered.\n   *\n   * @protected\n   * @param {string} name\n   * @returns {TaskFactory~TaskModifier?}\n   */\n  getModifier(name) {\n    if (hasModifier(name)) {\n      return MODIFIER_REGISTRY[name].bind(null, this);\n    }\n  }\n\n  /**\n   * Returns the options provided to TaskFactory\n   *\n   * @public\n   * @returns {object}\n   */\n  getOptions() {\n    return this.options;\n  }\n\n  /**\n   * Returns a new Scheduler instance\n   *\n   * @protected\n   * @param {*} schedulerPolicy\n   * @param {boolean} stateTrackingEnabled\n   * @returns {Scheduler}\n   */\n  getScheduler(schedulerPolicy, stateTrackingEnabled) {\n    return new Scheduler(schedulerPolicy, stateTrackingEnabled);\n  }\n\n  /**\n   * Returns the options to pass to a Task or TaskGroup constructor\n   *\n   * @protected\n   * @param {*} context\n   * @returns {object}\n   */\n  getTaskOptions(context) {\n    let group, scheduler;\n    let onStateCallback = this._onStateCallback;\n\n    if (this._taskGroupPath) {\n      group = context[this._taskGroupPath];\n      if (!(group instanceof TaskGroup)) {\n        throw new Error(\n          `Expected group '${this._taskGroupPath}' to be defined but was not found.`,\n        );\n      }\n\n      scheduler = group.scheduler;\n    } else {\n      let schedulerPolicy = new this._schedulerPolicyClass(\n        this._maxConcurrency,\n      );\n      scheduler = this.getScheduler(\n        schedulerPolicy,\n        onStateCallback && typeof onStateCallback === 'function',\n      );\n    }\n\n    return {\n      context,\n      debug: this._debug,\n      env: this.env,\n      name: this.name,\n      group,\n      scheduler,\n      hasEnabledEvents: this._hasEnabledEvents,\n      onStateCallback,\n      enabledModifiers: this._enabledModifiers,\n      modifierOptions: this.getOptions(),\n    };\n  }\n\n  /**\n   * Sets the Scheduler buffer policy class to the specified value.\n   *\n   * Will raise an assertion if a buffer policy has already been specified\n   *\n   * @param {*} policy\n   * @returns {TaskFactory}\n   */\n  setBufferPolicy(policy) {\n    assertUnsetBufferPolicy(this);\n    this._hasSetBufferPolicy = true;\n    this._hasSetConcurrencyConstraint = true;\n    this._schedulerPolicyClass = policy;\n    assertModifiersNotMixedWithGroup(this);\n\n    return this;\n  }\n\n  /**\n   * Sets debug mode\n   *\n   * @param {boolean} enabled\n   * @returns {TaskFactory}\n   */\n  setDebug(enabled) {\n    this._debug = enabled;\n    return this;\n  }\n\n  /**\n   * Sets whether Task will dispatch Task events or not\n   *\n   * @param {boolean} enabled\n   * @returns {TaskFactory}\n   */\n  setEvented(enabled) {\n    this._hasEnabledEvents = enabled;\n    return this;\n  }\n\n  /**\n   * Sets Scheduling policy's `maxConcurrency`\n   *\n   * @param {number} maxConcurrency\n   * @returns {TaskFactory}\n   */\n  setMaxConcurrency(maxConcurrency) {\n    this._hasSetConcurrencyConstraint = true;\n    this._maxConcurrency = maxConcurrency;\n    return this;\n  }\n\n  /**\n   * Assigns Task created from this factory to the specified group name\n   *\n   * @param {string} group\n   * @returns {TaskFactory}\n   */\n  setGroup(group) {\n    this._taskGroupPath = group;\n    return this;\n  }\n\n  /**\n   * Sets the name of tasks created from this factory\n   *\n   * @param {string} name\n   * @returns {TaskFactory}\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the callback used on state updates. Can be set to null to disable\n   * state tracking on tasks.\n   *\n   * @param {function} onStateCallback\n   * @returns {TaskFactory}\n   */\n  setOnState(onStateCallback) {\n    this._onStateCallback = onStateCallback;\n    return this;\n  }\n\n  /**\n   * Sets the definition for tasks created from this factory\n   *\n   * @param {*} taskDefinition\n   * @returns {TaskFactory}\n   */\n  setTaskDefinition(taskDefinition) {\n    this.taskDefinition = taskDefinition;\n    return this;\n  }\n\n  _processModifierOptions(options) {\n    if (!options) {\n      return;\n    }\n\n    for (let key of Object.keys(options)) {\n      let value = options[key];\n      let modifier = this.getModifier(key);\n\n      if (typeof modifier === 'function' && modifier(value)) {\n        this._enabledModifiers.push(key);\n      }\n    }\n  }\n}\n"],"names":["assertModifiersNotMixedWithGroup","obj","_hasSetConcurrencyConstraint","_taskGroupPath","Error","assertUnsetBufferPolicy","_hasSetBufferPolicy","_schedulerPolicyClass","name","MODIFIER_REGISTRY","enqueue","factory","value","setBufferPolicy","EnqueueSchedulerPolicy","evented","setEvented","debug","setDebug","drop","DropSchedulerPolicy","group","groupName","setGroup","keepLatest","KeepLatestSchedulerPolicy","maxConcurrency","setMaxConcurrency","onState","onStateCallback","setOnState","restartable","RestartableSchedulerPolicy","registerModifier","callback","getModifier","hasModifier","TaskFactory","env","DEFAULT_ENVIRONMENT","_debug","_enabledModifiers","_hasEnabledEvents","_maxConcurrency","_onStateCallback","state","taskable","setState","UnboundedSchedulerPolicy","constructor","taskDefinition","options","_processModifierOptions","createTask","context","getTaskOptions","Task","Object","assign","generatorFactory","args","apply","createTaskGroup","TaskGroup","bind","getOptions","getScheduler","schedulerPolicy","stateTrackingEnabled","Scheduler","scheduler","hasEnabledEvents","enabledModifiers","modifierOptions","policy","enabled","setName","setTaskDefinition","key","keys","modifier","push"],"mappings":"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"}