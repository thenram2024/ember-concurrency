{"version":3,"file":"restartable-policy.js","sources":["../../../../../src/-private/external/scheduler/policies/restartable-policy.js"],"sourcesContent":["import BoundedPolicy from './bounded-policy';\nimport { STARTED, makeCancelState } from './execution-states';\n\nconst CANCELLED = makeCancelState(\n  `it belongs to a 'restartable' Task that was .perform()ed again`,\n);\n\nclass RestartableReducer {\n  constructor(numToCancel) {\n    this.numToCancel = numToCancel;\n  }\n\n  step() {\n    if (this.numToCancel > 0) {\n      this.numToCancel--;\n      return CANCELLED;\n    } else {\n      return STARTED;\n    }\n  }\n}\n\nclass RestartablePolicy extends BoundedPolicy {\n  makeReducer(numRunning, numQueued) {\n    return new RestartableReducer(numRunning + numQueued - this.maxConcurrency);\n  }\n}\n\nexport default RestartablePolicy;\n"],"names":["CANCELLED","makeCancelState","RestartableReducer","constructor","numToCancel","step","STARTED","RestartablePolicy","BoundedPolicy","makeReducer","numRunning","numQueued","maxConcurrency"],"mappings":";;;AAGA,MAAMA,SAAS,GAAGC,eAAe,CAC9B,gEACH,CAAC,CAAA;AAED,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAGA,WAAW,CAAA;AAChC,GAAA;AAEAC,EAAAA,IAAIA,GAAG;AACL,IAAA,IAAI,IAAI,CAACD,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACA,WAAW,EAAE,CAAA;AAClB,MAAA,OAAOJ,SAAS,CAAA;AAClB,KAAC,MAAM;AACL,MAAA,OAAOM,OAAO,CAAA;AAChB,KAAA;AACF,GAAA;AACF,CAAA;AAEA,MAAMC,iBAAiB,SAASC,aAAa,CAAC;AAC5CC,EAAAA,WAAWA,CAACC,UAAU,EAAEC,SAAS,EAAE;IACjC,OAAO,IAAIT,kBAAkB,CAACQ,UAAU,GAAGC,SAAS,GAAG,IAAI,CAACC,cAAc,CAAC,CAAA;AAC7E,GAAA;AACF;;;;"}