{"version":3,"file":"state.js","sources":["../../../../../src/-private/external/scheduler/state-tracker/state.js"],"sourcesContent":["import {\n  COMPLETION_SUCCESS,\n  COMPLETION_ERROR,\n  COMPLETION_CANCEL,\n} from '../../task-instance/completion-states';\n\nclass RefreshState {\n  constructor(taskable, tag) {\n    this.taskable = taskable;\n    this.group = taskable.group;\n    this.numRunning = 0;\n    this.numQueued = 0;\n    this.numPerformedInc = 0;\n    this.attrs = {};\n    this.tag = tag;\n  }\n\n  onCompletion(taskInstance) {\n    let state = taskInstance.completionState;\n    this.attrs.lastRunning = null;\n    this.attrs.lastComplete = taskInstance;\n    if (state === COMPLETION_SUCCESS) {\n      this.attrs.lastSuccessful = taskInstance;\n    } else {\n      if (state === COMPLETION_ERROR) {\n        this.attrs.lastErrored = taskInstance;\n      } else if (state === COMPLETION_CANCEL) {\n        this.attrs.lastCanceled = taskInstance;\n      }\n      this.attrs.lastIncomplete = taskInstance;\n    }\n  }\n\n  onPerformed(taskInstance) {\n    this.numPerformedInc += 1;\n    this.attrs.lastPerformed = taskInstance;\n  }\n\n  onStart(taskInstance) {\n    this.attrs.last = taskInstance;\n  }\n\n  onRunning(taskInstance) {\n    this.attrs.lastRunning = taskInstance;\n    this.numRunning += 1;\n  }\n\n  onQueued() {\n    this.numQueued += 1;\n  }\n\n  recurseTaskGroups(callback) {\n    let group = this.group;\n    while (group) {\n      callback(group);\n      group = group.group;\n    }\n  }\n\n  applyStateFrom(other) {\n    Object.assign(this.attrs, other.attrs);\n    this.numRunning += other.numRunning;\n    this.numQueued += other.numQueued;\n    this.numPerformedInc += other.numPerformedInc;\n  }\n}\n\nexport default RefreshState;\n"],"names":["RefreshState","constructor","taskable","tag","group","numRunning","numQueued","numPerformedInc","attrs","onCompletion","taskInstance","state","completionState","lastRunning","lastComplete","COMPLETION_SUCCESS","lastSuccessful","COMPLETION_ERROR","lastErrored","COMPLETION_CANCEL","lastCanceled","lastIncomplete","onPerformed","lastPerformed","onStart","last","onRunning","onQueued","recurseTaskGroups","callback","applyStateFrom","other","Object","assign"],"mappings":";;AAMA,MAAMA,YAAY,CAAC;AACjBC,EAAAA,WAAWA,CAACC,QAAQ,EAAEC,GAAG,EAAE;IACzB,IAAI,CAACD,QAAQ,GAAGA,QAAQ,CAAA;AACxB,IAAA,IAAI,CAACE,KAAK,GAAGF,QAAQ,CAACE,KAAK,CAAA;IAC3B,IAAI,CAACC,UAAU,GAAG,CAAC,CAAA;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAA;IAClB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAA;AACxB,IAAA,IAAI,CAACC,KAAK,GAAG,EAAE,CAAA;IACf,IAAI,CAACL,GAAG,GAAGA,GAAG,CAAA;AAChB,GAAA;EAEAM,YAAYA,CAACC,YAAY,EAAE;AACzB,IAAA,IAAIC,KAAK,GAAGD,YAAY,CAACE,eAAe,CAAA;AACxC,IAAA,IAAI,CAACJ,KAAK,CAACK,WAAW,GAAG,IAAI,CAAA;AAC7B,IAAA,IAAI,CAACL,KAAK,CAACM,YAAY,GAAGJ,YAAY,CAAA;IACtC,IAAIC,KAAK,KAAKI,kBAAkB,EAAE;AAChC,MAAA,IAAI,CAACP,KAAK,CAACQ,cAAc,GAAGN,YAAY,CAAA;AAC1C,KAAC,MAAM;MACL,IAAIC,KAAK,KAAKM,gBAAgB,EAAE;AAC9B,QAAA,IAAI,CAACT,KAAK,CAACU,WAAW,GAAGR,YAAY,CAAA;AACvC,OAAC,MAAM,IAAIC,KAAK,KAAKQ,iBAAiB,EAAE;AACtC,QAAA,IAAI,CAACX,KAAK,CAACY,YAAY,GAAGV,YAAY,CAAA;AACxC,OAAA;AACA,MAAA,IAAI,CAACF,KAAK,CAACa,cAAc,GAAGX,YAAY,CAAA;AAC1C,KAAA;AACF,GAAA;EAEAY,WAAWA,CAACZ,YAAY,EAAE;IACxB,IAAI,CAACH,eAAe,IAAI,CAAC,CAAA;AACzB,IAAA,IAAI,CAACC,KAAK,CAACe,aAAa,GAAGb,YAAY,CAAA;AACzC,GAAA;EAEAc,OAAOA,CAACd,YAAY,EAAE;AACpB,IAAA,IAAI,CAACF,KAAK,CAACiB,IAAI,GAAGf,YAAY,CAAA;AAChC,GAAA;EAEAgB,SAASA,CAAChB,YAAY,EAAE;AACtB,IAAA,IAAI,CAACF,KAAK,CAACK,WAAW,GAAGH,YAAY,CAAA;IACrC,IAAI,CAACL,UAAU,IAAI,CAAC,CAAA;AACtB,GAAA;AAEAsB,EAAAA,QAAQA,GAAG;IACT,IAAI,CAACrB,SAAS,IAAI,CAAC,CAAA;AACrB,GAAA;EAEAsB,iBAAiBA,CAACC,QAAQ,EAAE;AAC1B,IAAA,IAAIzB,KAAK,GAAG,IAAI,CAACA,KAAK,CAAA;AACtB,IAAA,OAAOA,KAAK,EAAE;MACZyB,QAAQ,CAACzB,KAAK,CAAC,CAAA;MACfA,KAAK,GAAGA,KAAK,CAACA,KAAK,CAAA;AACrB,KAAA;AACF,GAAA;EAEA0B,cAAcA,CAACC,KAAK,EAAE;IACpBC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACzB,KAAK,EAAEuB,KAAK,CAACvB,KAAK,CAAC,CAAA;AACtC,IAAA,IAAI,CAACH,UAAU,IAAI0B,KAAK,CAAC1B,UAAU,CAAA;AACnC,IAAA,IAAI,CAACC,SAAS,IAAIyB,KAAK,CAACzB,SAAS,CAAA;AACjC,IAAA,IAAI,CAACC,eAAe,IAAIwB,KAAK,CAACxB,eAAe,CAAA;AAC/C,GAAA;AACF;;;;"}