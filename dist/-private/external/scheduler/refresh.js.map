{"version":3,"file":"refresh.js","sources":["../../../../src/-private/external/scheduler/refresh.js"],"sourcesContent":["import {\n  TYPE_STARTED,\n  TYPE_QUEUED,\n  TYPE_CANCELLED,\n} from './policies/execution-states';\n\nconst LAST_APPLIED_TAGS = new Map();\n\nclass Refresh {\n  constructor(schedulerPolicy, stateTracker, taskInstances) {\n    this.stateTracker = stateTracker;\n    this.schedulerPolicy = schedulerPolicy;\n    this.initialTaskInstances = taskInstances;\n    this.startingInstances = [];\n  }\n\n  process() {\n    let [taskInstances, numRunning, numQueued] =\n      this.filterFinishedTaskInstances();\n    let reducer = this.schedulerPolicy.makeReducer(numRunning, numQueued);\n\n    let finalTaskInstances = taskInstances.filter((taskInstance) => {\n      return this.setTaskInstanceExecutionState(taskInstance, reducer.step());\n    });\n\n    this.stateTracker.computeFinalStates((state) => this.applyState(state));\n    this.startingInstances.forEach((taskInstance) => taskInstance.start());\n\n    return finalTaskInstances;\n  }\n\n  filterFinishedTaskInstances() {\n    let numRunning = 0,\n      numQueued = 0;\n    let taskInstances = this.initialTaskInstances.filter((taskInstance) => {\n      let taskState = this.stateTracker.stateFor(taskInstance.task);\n      let executorState = taskInstance.executor.state;\n\n      if (executorState.isFinished) {\n        taskState.onCompletion(taskInstance);\n        return false;\n      }\n\n      if (executorState.hasStarted) {\n        numRunning += 1;\n      } else {\n        numQueued += 1;\n      }\n\n      return true;\n    });\n    return [taskInstances, numRunning, numQueued];\n  }\n\n  setTaskInstanceExecutionState(taskInstance, desiredState) {\n    let taskState = this.stateTracker.stateFor(taskInstance.task);\n\n    if (!taskInstance.executor.counted) {\n      taskInstance.executor.counted = true;\n      taskState.onPerformed(taskInstance);\n    }\n\n    switch (desiredState.type) {\n      case TYPE_CANCELLED:\n        // this will cause a follow up flush which will detect and recompute cancellation state\n        taskInstance.cancel(desiredState.reason);\n        return false;\n      case TYPE_STARTED:\n        if (!taskInstance.executor.state.hasStarted) {\n          this.startingInstances.push(taskInstance);\n          taskState.onStart(taskInstance);\n        }\n        taskState.onRunning(taskInstance);\n        return true;\n      case TYPE_QUEUED:\n        taskState.onQueued(taskInstance);\n        // TODO: assert taskInstance hasn't started?\n        // Or perhaps this can be a way to pause a task?\n        return true;\n    }\n  }\n\n  applyState(state) {\n    let { taskable } = state;\n\n    if (!taskable.onState) {\n      return;\n    }\n\n    const { guid } = taskable;\n\n    if (\n      LAST_APPLIED_TAGS.has(guid) &&\n      state.tag < LAST_APPLIED_TAGS.get(guid)\n    ) {\n      return;\n    }\n\n    let props = Object.assign(\n      {\n        numRunning: state.numRunning,\n        numQueued: state.numQueued,\n        numPerformedInc: state.numPerformedInc,\n      },\n      state.attrs,\n    );\n\n    taskable.onState(props, taskable);\n\n    LAST_APPLIED_TAGS.set(guid, state.tag);\n  }\n}\n\nexport default Refresh;\n"],"names":["LAST_APPLIED_TAGS","Map","Refresh","constructor","schedulerPolicy","stateTracker","taskInstances","initialTaskInstances","startingInstances","process","numRunning","numQueued","filterFinishedTaskInstances","reducer","makeReducer","finalTaskInstances","filter","taskInstance","setTaskInstanceExecutionState","step","computeFinalStates","state","applyState","forEach","start","taskState","stateFor","task","executorState","executor","isFinished","onCompletion","hasStarted","desiredState","counted","onPerformed","type","TYPE_CANCELLED","cancel","reason","TYPE_STARTED","push","onStart","onRunning","TYPE_QUEUED","onQueued","taskable","onState","guid","has","tag","get","props","Object","assign","numPerformedInc","attrs","set"],"mappings":"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"}