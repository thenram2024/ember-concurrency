{"version":3,"file":"yieldables.js","sources":["../../../src/-private/external/yieldables.js"],"sourcesContent":["export const cancelableSymbol = '__ec_cancel__';\nexport const yieldableSymbol = '__ec_yieldable__';\nexport const YIELDABLE_CONTINUE = 'next';\nexport const YIELDABLE_THROW = 'throw';\nexport const YIELDABLE_RETURN = 'return';\nexport const YIELDABLE_CANCEL = 'cancel';\n\n/**\n * @class YieldableState\n * @hideconstructor\n */\nclass YieldableState {\n  constructor(taskInstance, resumeIndex) {\n    this._taskInstance = taskInstance;\n    this._resumeIndex = resumeIndex;\n  }\n\n  /**\n   * Return yielded TaskInstance. Useful for introspection on instance state.\n   * @method getTaskInstance\n   * @memberof YieldableState\n   * @public\n   * @instance\n   */\n  getTaskInstance() {\n    return this._taskInstance;\n  }\n\n  /**\n   * Cancel the yielded TaskInstance.\n   * @method cancel\n   * @memberof YieldableState\n   * @public\n   * @instance\n   */\n  cancel() {\n    let taskInstance = this._taskInstance;\n    taskInstance.proceed.call(\n      taskInstance,\n      this._resumeIndex,\n      YIELDABLE_CANCEL,\n    );\n  }\n\n  /**\n   * Cause the TaskInstance to return from its yield with an optional value,\n   * and continue executing.\n   * @method next\n   * @memberof YieldableState\n   * @param value\n   * @public\n   * @instance\n   */\n  next(value) {\n    let taskInstance = this._taskInstance;\n    taskInstance.proceed.call(\n      taskInstance,\n      this._resumeIndex,\n      YIELDABLE_CONTINUE,\n      value,\n    );\n  }\n\n  /**\n   * Short-circuit TaskInstance execution and have it return with an optional\n   * value.\n   * @method return\n   * @memberof YieldableState\n   * @param value\n   * @public\n   * @instance\n   */\n  return(value) {\n    let taskInstance = this._taskInstance;\n    taskInstance.proceed.call(\n      taskInstance,\n      this._resumeIndex,\n      YIELDABLE_RETURN,\n      value,\n    );\n  }\n\n  /**\n   * Raise a given error within the given task instance and halt execution\n   * @method throw\n   * @memberof YieldableState\n   * @param error\n   * @public\n   * @instance\n   */\n  throw(error) {\n    let taskInstance = this._taskInstance;\n    taskInstance.proceed.call(\n      taskInstance,\n      this._resumeIndex,\n      YIELDABLE_THROW,\n      error,\n    );\n  }\n}\n\n/**\n * Yieldables are a primitive for building safe, cancelation-aware ways to\n * instrument and introspect the runtime of a task. Many Yieldables are built-in\n * to ember-concurrency today, such as `timeout`, `animationFrame`, and\n * `rawTimeout`.\n *\n * For example, if I wanted to implement a yieldable for `requestIdleCallback`,\n * I could do the following:\n *\n * ```javascript\n * import Component from '@glimmer/component';\n * import { task, Yieldable } from 'ember-concurrency';\n *\n * class IdleCallbackYieldable extends Yieldable {\n *   onYield(state) {\n *     let callbackId = requestIdleCallback(() => state.next());\n *\n *     return () => cancelIdleCallback(callbackId);\n *   }\n * }\n *\n * const idleCallback = () => new IdleCallbackYieldable();\n *\n * class MyComponent extends Component {\n *   &#64;task *backgroundTask() {\n *     while (1) {\n *       yield idleCallback();\n *\n *       const data = this.complicatedNumberCrunching();\n *       yield this.sendData(data);\n *     }\n *   }\n * }\n * ```\n *\n * In general, `Yieldable` instances **should** be reusable across calls, and thus\n * care should be taken to ensure that teardown is provided and state not\n * intended to be shared across calls stay inside `onYield`.\n *\n * `Yieldable` also provides automatic Promise-casting.\n *\n * <style>\n *   .ignore-this--this-is-here-to-hide-constructor,\n *   #Yieldable { display: none }\n * </style>\n *\n * @class Yieldable\n */\nexport class Yieldable {\n  constructor() {\n    this[yieldableSymbol] = this[yieldableSymbol].bind(this);\n  }\n\n  /**\n   * Defines what happens when the task encounters `yield myYieldable` and returns\n   * a disposer function that handles any cleanup.\n   *\n   * The state parameter is provided by the runtime, and provides operations for\n   * interacting with the yielding task instance and advancing, returning,\n   * throwing, or canceling its execution.\n   *\n   * @method onYield\n   * @memberof Yieldable\n   * @param {YieldableState} state\n   * @instance\n   * @public\n   */\n  onYield() {}\n\n  _deferable() {\n    let def = { resolve: undefined, reject: undefined };\n\n    def.promise = new Promise((resolve, reject) => {\n      def.resolve = resolve;\n      def.reject = reject;\n    });\n\n    return def;\n  }\n\n  _toPromise() {\n    let def = this._deferable();\n\n    let thinInstance = {\n      proceed(_index, resumeType, value) {\n        if (\n          resumeType == YIELDABLE_CONTINUE ||\n          resumeType == YIELDABLE_RETURN\n        ) {\n          def.resolve(value);\n        } else {\n          def.reject(value);\n        }\n      },\n    };\n\n    let maybeDisposer = this[yieldableSymbol](thinInstance, 0);\n    def.promise[cancelableSymbol] = maybeDisposer;\n\n    return def.promise;\n  }\n\n  /**\n   * Returns a promise that resolves with the value yielded back to or returned\n   * to the yielded task, or rejects with either the exception thrown from the\n   * Yieldable, or an error with a `.name` property with value `\"TaskCancelation\"`.\n   *\n   * @method then\n   * @memberof Yieldable\n   * @instance\n   * @return {Promise}\n   */\n  then(...args) {\n    return this._toPromise().then(...args);\n  }\n\n  /**\n   * @method catch\n   * @memberof Yieldable\n   * @instance\n   * @return {Promise}\n   */\n  catch(...args) {\n    return this._toPromise().catch(...args);\n  }\n\n  /**\n   * @method finally\n   * @memberof Yieldable\n   * @instance\n   * @return {Promise}\n   */\n  finally(...args) {\n    return this._toPromise().finally(...args);\n  }\n\n  [yieldableSymbol](taskInstance, resumeIndex) {\n    let state = new YieldableState(taskInstance, resumeIndex);\n\n    return this.onYield(state);\n  }\n}\n\nclass AnimationFrameYieldable extends Yieldable {\n  onYield(state) {\n    let timerId = requestAnimationFrame(() => state.next());\n\n    return () => cancelAnimationFrame(timerId);\n  }\n}\n\nclass ForeverYieldable extends Yieldable {\n  onYield() {}\n}\n\nclass RawTimeoutYieldable extends Yieldable {\n  constructor(ms) {\n    super();\n    this.ms = ms;\n  }\n\n  onYield(state) {\n    let timerId = setTimeout(() => state.next(), this.ms);\n\n    return () => clearTimeout(timerId);\n  }\n}\n\n/**\n * Yielding `animationFrame()` will pause a task until after the next animation\n * frame using the native `requestAnimationFrame()` browser API.\n *\n * The task below, when performed, will print the time since the last loop run\n * for every animation frame.\n *\n * ```js\n * export default class MyComponent extends Component {\n *   &#64;task *myTask() {\n *     let lastNow = performance.now();\n *     while (true) {\n *       yield animationFrame();\n *\n *       let now = performance.now();\n *       let dt = now - lastNow;\n *       lastNow = now;\n *\n *       console.log(dt);\n *     }\n *   }\n * }\n * ```\n */\nexport function animationFrame() {\n  return new AnimationFrameYieldable();\n}\n\n/**\n *\n * Yielding `forever` will pause a task indefinitely until\n * it is cancelled (i.e. via host object destruction, the restartable modifier,\n * or manual cancellation).\n *\n * This is often useful in cases involving animation: if you're\n * using Liquid Fire, or some other animation scheme, sometimes you'll\n * notice buttons visibly reverting to their inactive states during\n * a route transition. By yielding `forever` in a Component task that drives a\n * button's active state, you can keep a task indefinitely running\n * until the animation runs to completion.\n *\n * NOTE: Liquid Fire also includes a useful `waitUntilIdle()` method\n * on the `liquid-fire-transitions` service that you can use in a lot\n * of these cases, but it won't cover cases of asynchrony that are\n * unrelated to animation, in which case `forever` might be better suited\n * to your needs.\n *\n * ```js\n * import { task, forever } from 'ember-concurrency';\n * export default class MyComponent extends Component {\n *   &#64;service myService;\n *   &#64;task *myTask() {\n *     yield this.myService.doSomethingThatCausesATransition();\n *     yield forever;\n *   }\n * }\n * ```\n */\nexport const forever = new ForeverYieldable();\n\n/**\n *\n * Yielding `rawTimeout(ms)` will pause a task for the duration\n * of time passed in, in milliseconds.\n *\n * The timeout will use the native `setTimeout()` browser API,\n * instead of the Ember runloop, which means that test helpers\n * will *not* wait for it to complete.\n *\n * The task below, when performed, will print a message to the\n * console every second.\n *\n * ```js\n * export default class MyComponent extends Component {\n *   &#64;task *myTask() {\n *     while (true) {\n *       console.log(\"Hello!\");\n *       yield rawTimeout(1000);\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} ms - the amount of time to sleep before resuming\n *   the task, in milliseconds\n */\nexport function rawTimeout(ms) {\n  return new RawTimeoutYieldable(ms);\n}\n"],"names":["cancelableSymbol","yieldableSymbol","YIELDABLE_CONTINUE","YIELDABLE_THROW","YIELDABLE_RETURN","YIELDABLE_CANCEL","YieldableState","constructor","taskInstance","resumeIndex","_taskInstance","_resumeIndex","getTaskInstance","cancel","proceed","call","next","value","return","throw","error","Yieldable","bind","onYield","_deferable","def","resolve","undefined","reject","promise","Promise","_toPromise","thinInstance","_index","resumeType","maybeDisposer","then","args","catch","finally","state","AnimationFrameYieldable","timerId","requestAnimationFrame","cancelAnimationFrame","ForeverYieldable","RawTimeoutYieldable","ms","setTimeout","clearTimeout","animationFrame","forever","rawTimeout"],"mappings":"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AA;AAEA,MAAMG,gBAAgB,SAASxB,SAAS,CAAC;EACvCE,OAAOA,GAAG,EAAC;AACb,CAAA;AAEA,MAAMuB,mBAAmB,SAASzB,SAAS,CAAC;EAC1Cd,WAAWA,CAACwC,EAAE,EAAE;AACd,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACA,EAAE,GAAGA,EAAE,CAAA;AACd,GAAA;EAEAxB,OAAOA,CAACiB,KAAK,EAAE;AACb,IAAA,IAAIE,OAAO,GAAGM,UAAU,CAAC,MAAMR,KAAK,CAACxB,IAAI,EAAE,EAAE,IAAI,CAAC+B,EAAE,CAAC,CAAA;AAErD,IAAA,OAAO,MAAME,YAAY,CAACP,OAAO,CAAC,CAAA;AACpC,GAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASQ,cAAcA,GAAG;EAC/B,OAAO,IAAIT,uBAAuB,EAAE,CAAA;AACtC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaU,OAAO,GAAG,IAAIN,gBAAgB,GAAE;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASO,UAAUA,CAACL,EAAE,EAAE;AAC7B,EAAA,OAAO,IAAID,mBAAmB,CAACC,EAAE,CAAC,CAAA;AACpC;;;;"}