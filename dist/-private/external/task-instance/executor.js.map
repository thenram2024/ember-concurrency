{"version":3,"file":"executor.js","sources":["../../../../src/-private/external/task-instance/executor.js"],"sourcesContent":["import { GeneratorState } from '../generator-state';\nimport { INITIAL_STATE } from './initial-state';\nimport {\n  yieldableSymbol,\n  YIELDABLE_CONTINUE,\n  YIELDABLE_THROW,\n  YIELDABLE_RETURN,\n  YIELDABLE_CANCEL,\n  cancelableSymbol,\n} from '../yieldables';\n\nimport {\n  COMPLETION_SUCCESS,\n  COMPLETION_ERROR,\n  COMPLETION_CANCEL,\n} from './completion-states';\nimport {\n  CancelRequest,\n  CANCEL_KIND_YIELDABLE_CANCEL,\n  CANCEL_KIND_LIFESPAN_END,\n  CANCEL_KIND_PARENT_CANCEL,\n  didCancel,\n  TASK_CANCELATION_NAME,\n} from './cancelation';\n\nexport const PERFORM_TYPE_DEFAULT = 'PERFORM_TYPE_DEFAULT';\nexport const PERFORM_TYPE_UNLINKED = 'PERFORM_TYPE_UNLINKED';\nexport const PERFORM_TYPE_LINKED = 'PERFORM_TYPE_LINKED';\n\nconst CANCEL_RETURN_VALUE_SENTINEL = {};\nlet TASK_INSTANCE_STACK = [];\n\nexport function getRunningInstance() {\n  return TASK_INSTANCE_STACK[TASK_INSTANCE_STACK.length - 1];\n}\n\nexport class TaskInstanceExecutor {\n  constructor({ generatorFactory, env, debug }) {\n    this.generatorState = new GeneratorState(generatorFactory);\n    this.state = Object.assign({}, INITIAL_STATE);\n    this.index = 1;\n    this.disposers = [];\n    this.finalizeCallbacks = [];\n    this.env = env;\n    this.debug = debug;\n    this.cancelRequest = null;\n  }\n\n  start() {\n    if (this.state.hasStarted || this.cancelRequest) {\n      return;\n    }\n    this.setState({ hasStarted: true });\n    this.proceedSync(YIELDABLE_CONTINUE, undefined);\n    this.taskInstance.onStarted();\n  }\n\n  cancel(cancelRequest) {\n    if (!this.requestCancel(cancelRequest)) {\n      cancelRequest.finalize();\n      return cancelRequest.promise;\n    }\n\n    if (this.state.hasStarted) {\n      this.proceedWithCancelAsync();\n    } else {\n      this.finalizeWithCancel();\n    }\n\n    return this.cancelRequest.promise;\n  }\n\n  setState(state) {\n    Object.assign(this.state, state);\n    this.taskInstance.setState(this.state);\n  }\n\n  proceedChecked(index, yieldResumeType, value) {\n    if (this.state.isFinished) {\n      return;\n    }\n    if (!this.advanceIndex(index)) {\n      return;\n    }\n\n    if (yieldResumeType === YIELDABLE_CANCEL) {\n      this.requestCancel(\n        new CancelRequest(CANCEL_KIND_YIELDABLE_CANCEL),\n        value,\n      );\n      this.proceedWithCancelAsync();\n    } else {\n      this.proceedAsync(yieldResumeType, value);\n    }\n  }\n\n  proceedWithCancelAsync() {\n    this.proceedAsync(YIELDABLE_RETURN, CANCEL_RETURN_VALUE_SENTINEL);\n  }\n\n  proceedAsync(yieldResumeType, value) {\n    this.advanceIndex(this.index);\n    this.env.async(() => this.proceedSync(yieldResumeType, value));\n  }\n\n  proceedSync(yieldResumeType, value) {\n    if (this.state.isFinished) {\n      return;\n    }\n\n    this.dispose();\n\n    if (this.generatorState.done) {\n      this.handleResolvedReturnedValue(yieldResumeType, value);\n    } else {\n      this.handleResolvedContinueValue(yieldResumeType, value);\n    }\n  }\n\n  /**\n   * This method is called when a previously yielded value from\n   * the generator has been resolved, and now it's time to pass\n   * it back into the generator. There are 3 ways to \"resume\" a\n   * generator:\n   *\n   * - call `.next(value)` on it, which is used to pass in a resolved\n   *   value (the fulfilled value of a promise), e.g. if a task generator fn\n   *   does `yield Promise.resolve(5)`, then we take that promise yielded\n   *   by the generator, detect that it's a promise, resolve it, and then\n   *   pass its fulfilled value `5` back into the generator function so\n   *   that it can continue executing.\n   * - call `.throw(error)` on it, which throw an exception from where the\n   *   the generator previously yielded. We do this when the previously\n   *   yielded value resolves to an error value (e.g. a rejected promise\n   *   or a TaskInstance that finished with an error). Note that when you\n   *   resume a generator with a `.throw()`, it can still recover from that\n   *   thrown error and continue executing normally so long as the `yield`\n   *   was inside a `try/catch` statement.\n   * - call `.return(value)` on it, causes the generator function to return\n   *   from where it previously `yield`ed. We use `.return()` when cancelling\n   *   a TaskInstance; by `.return`ing, rather than `.throw`ing, it allows\n   *   the generator function to skip `catch(e) {}` blocks, which is usually\n   *   reserved for actual errors/exceptions; if we `.throw`'d cancellations,\n   *   it would require all tasks that used try/catch to conditionally ignore\n   *   cancellations, which is annoying. So we `.return()` from generator functions\n   *   in the case of errors as a matter of convenience.\n   *\n   * @private\n   */\n  handleResolvedContinueValue(iteratorMethod, resumeValue) {\n    let beforeIndex = this.index;\n    let stepResult = this.generatorStep(resumeValue, iteratorMethod);\n\n    // TODO: what is this doing? write breaking test.\n    if (!this.advanceIndex(beforeIndex)) {\n      return;\n    }\n\n    if (stepResult.errored) {\n      this.finalize(stepResult.value, COMPLETION_ERROR);\n      return;\n    }\n\n    this.handleYieldedValue(stepResult);\n  }\n\n  /**\n   * This method is called when the generator function is all\n   * out of values, and the last value returned from the function\n   * (possible a thenable/yieldable/promise/etc) has been resolved.\n   *\n   * Possible cases:\n   * - `return \"simple value\";` // resolved value is \"simple value\"\n   * - `return undefined;` // (or omitted return) resolved value is undefined\n   * - `return someTask.perform()` // resolved value is the value returned/resolved from someTask\n   *\n   * @private\n   */\n  handleResolvedReturnedValue(yieldResumeType, value) {\n    switch (yieldResumeType) {\n      case YIELDABLE_CONTINUE:\n      case YIELDABLE_RETURN:\n        this.finalize(value, COMPLETION_SUCCESS);\n        break;\n      case YIELDABLE_THROW:\n        this.finalize(value, COMPLETION_ERROR);\n        break;\n    }\n  }\n\n  handleYieldedUnknownThenable(thenable) {\n    let resumeIndex = this.index;\n    thenable.then(\n      (value) => {\n        this.proceedChecked(resumeIndex, YIELDABLE_CONTINUE, value);\n      },\n      (error) => {\n        this.proceedChecked(resumeIndex, YIELDABLE_THROW, error);\n      },\n    );\n  }\n\n  /**\n   * The TaskInstance internally tracks an index/sequence number\n   * (the `index` property) which gets incremented every time the\n   * task generator function iterator takes a step. When a task\n   * function is paused at a `yield`, there are two events that\n   * cause the TaskInstance to take a step: 1) the yielded value\n   * \"resolves\", thus resuming the TaskInstance's execution, or\n   * 2) the TaskInstance is canceled. We need some mechanism to prevent\n   * stale yielded value resolutions from resuming the TaskFunction\n   * after the TaskInstance has already moved on (either because\n   * the TaskInstance has since been canceled or because an\n   * implementation of the Yieldable API tried to resume the\n   * TaskInstance more than once). The `index` serves as\n   * that simple mechanism: anyone resuming a TaskInstance\n   * needs to pass in the `index` they were provided that acts\n   * as a ticket to resume the TaskInstance that expires once\n   * the TaskInstance has moved on.\n   *\n   * @private\n   */\n  advanceIndex(index) {\n    if (this.index === index) {\n      return ++this.index;\n    }\n  }\n\n  handleYieldedValue(stepResult) {\n    let yieldedValue = stepResult.value;\n    if (!yieldedValue) {\n      this.proceedWithSimpleValue(yieldedValue);\n      return;\n    }\n\n    this.addDisposer(yieldedValue[cancelableSymbol]);\n\n    if (yieldedValue[yieldableSymbol]) {\n      this.invokeYieldable(yieldedValue);\n    } else if (typeof yieldedValue.then === 'function') {\n      this.handleYieldedUnknownThenable(yieldedValue);\n    } else {\n      this.proceedWithSimpleValue(yieldedValue);\n    }\n  }\n\n  proceedWithSimpleValue(yieldedValue) {\n    this.proceedAsync(YIELDABLE_CONTINUE, yieldedValue);\n  }\n\n  addDisposer(maybeDisposer) {\n    if (typeof maybeDisposer !== 'function') {\n      return;\n    }\n\n    this.disposers.push(maybeDisposer);\n  }\n\n  /**\n   * Runs any disposers attached to the task's most recent `yield`.\n   * For instance, when a task yields a TaskInstance, it registers that\n   * child TaskInstance's disposer, so that if the parent task is canceled,\n   * dispose() will run that disposer and cancel the child TaskInstance.\n   *\n   * @private\n   */\n  dispose() {\n    let disposers = this.disposers;\n    if (disposers.length === 0) {\n      return;\n    }\n    this.disposers = [];\n    disposers.forEach((disposer) => disposer());\n  }\n\n  /**\n   * Calls .next()/.throw()/.return() on the task's generator function iterator,\n   * essentially taking a single step of execution on the task function.\n   *\n   * @private\n   */\n  generatorStep(nextValue, iteratorMethod) {\n    TASK_INSTANCE_STACK.push(this);\n    let stepResult = this.generatorState.step(nextValue, iteratorMethod);\n    TASK_INSTANCE_STACK.pop();\n\n    // TODO: fix this!\n    if (this._expectsLinkedYield) {\n      let value = stepResult.value;\n      if (!value || value.performType !== PERFORM_TYPE_LINKED) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'You performed a .linked() task without immediately yielding/returning it. This is currently unsupported (but might be supported in future version of ember-concurrency).',\n        );\n      }\n      this._expectsLinkedYield = false;\n    }\n\n    return stepResult;\n  }\n\n  maybeResolveDefer() {\n    if (!this.defer || !this.state.isFinished) {\n      return;\n    }\n\n    if (this.state.completionState === COMPLETION_SUCCESS) {\n      this.defer.resolve(this.state.value);\n    } else {\n      this.defer.reject(this.state.error);\n    }\n  }\n\n  onFinalize(callback) {\n    this.finalizeCallbacks.push(callback);\n\n    if (this.state.isFinished) {\n      this.runFinalizeCallbacks();\n    }\n  }\n\n  runFinalizeCallbacks() {\n    this.finalizeCallbacks.forEach((cb) => cb());\n    this.finalizeCallbacks = [];\n    this.maybeResolveDefer();\n    this.maybeThrowUnhandledTaskErrorLater();\n  }\n\n  promise() {\n    if (!this.defer) {\n      this.defer = this.env.defer();\n      this.asyncErrorsHandled = true;\n      this.maybeResolveDefer();\n    }\n    return this.defer.promise;\n  }\n\n  maybeThrowUnhandledTaskErrorLater() {\n    if (\n      !this.asyncErrorsHandled &&\n      this.state.completionState === COMPLETION_ERROR &&\n      !didCancel(this.state.error)\n    ) {\n      this.env.async(() => {\n        if (!this.asyncErrorsHandled) {\n          this.env.reportUncaughtRejection(this.state.error);\n        }\n      });\n    }\n  }\n\n  requestCancel(request) {\n    if (this.cancelRequest || this.state.isFinished) {\n      return false;\n    }\n    this.cancelRequest = request;\n    return true;\n  }\n\n  finalize(value, completionState) {\n    if (this.cancelRequest) {\n      return this.finalizeWithCancel();\n    }\n\n    let state = { completionState };\n\n    if (completionState === COMPLETION_SUCCESS) {\n      state.isSuccessful = true;\n      state.value = value;\n    } else if (completionState === COMPLETION_ERROR) {\n      state.isError = true;\n      state.error = value;\n    } else if (completionState === COMPLETION_CANCEL) {\n      state.error = value;\n    }\n\n    this.finalizeShared(state);\n  }\n\n  finalizeWithCancel() {\n    let cancelReason = this.taskInstance.formatCancelReason(\n      this.cancelRequest.reason,\n    );\n    let error = new Error(cancelReason);\n\n    if (this.debugEnabled()) {\n      // eslint-disable-next-line no-console\n      console.log(cancelReason);\n    }\n\n    error.name = TASK_CANCELATION_NAME;\n\n    this.finalizeShared({\n      isCanceled: true,\n      completionState: COMPLETION_CANCEL,\n      error,\n      cancelReason,\n    });\n\n    this.cancelRequest.finalize();\n  }\n\n  debugEnabled() {\n    return this.debug || this.env.globalDebuggingEnabled();\n  }\n\n  finalizeShared(state) {\n    this.index++;\n    state.isFinished = true;\n    this.setState(state);\n    this.runFinalizeCallbacks();\n    this.dispatchFinalizeEvents(state.completionState);\n  }\n\n  dispatchFinalizeEvents(completionState) {\n    switch (completionState) {\n      case COMPLETION_SUCCESS:\n        this.taskInstance.onSuccess();\n        break;\n      case COMPLETION_ERROR:\n        this.taskInstance.onError(this.state.error);\n        break;\n      case COMPLETION_CANCEL:\n        this.taskInstance.onCancel(this.state.cancelReason);\n        break;\n    }\n  }\n\n  invokeYieldable(yieldedValue) {\n    try {\n      let maybeDisposer = yieldedValue[yieldableSymbol](\n        this.taskInstance,\n        this.index,\n      );\n      this.addDisposer(maybeDisposer);\n    } catch (e) {\n      this.env.reportUncaughtRejection(e);\n    }\n  }\n\n  /**\n   * `onYielded` is called when this task instance has been\n   * yielded in another task instance's execution. We take\n   * this opportunity to conditionally link up the tasks\n   * so that when the parent or child cancels, the other\n   * is cancelled.\n   *\n   * Given the following case:\n   *\n   * ```js\n   * parentTask: task(function * () {\n   *   yield otherTask.perform();\n   * })\n   * ```\n   *\n   * Then the `parent` param is the task instance that is executing, `this`\n   * is the `otherTask` task instance that was yielded.\n   *\n   * @private\n   */\n  onYielded(parent, resumeIndex) {\n    this.asyncErrorsHandled = true;\n\n    this.onFinalize(() => {\n      let completionState = this.state.completionState;\n      if (completionState === COMPLETION_SUCCESS) {\n        parent.proceed(resumeIndex, YIELDABLE_CONTINUE, this.state.value);\n      } else if (completionState === COMPLETION_ERROR) {\n        parent.proceed(resumeIndex, YIELDABLE_THROW, this.state.error);\n      } else if (completionState === COMPLETION_CANCEL) {\n        parent.proceed(resumeIndex, YIELDABLE_CANCEL, null);\n      }\n    });\n\n    let performType = this.getPerformType();\n    if (performType === PERFORM_TYPE_UNLINKED) {\n      return;\n    }\n\n    return () => {\n      this.detectSelfCancelLoop(performType, parent);\n      this.cancel(new CancelRequest(CANCEL_KIND_PARENT_CANCEL));\n    };\n  }\n\n  getPerformType() {\n    return this.taskInstance.performType || PERFORM_TYPE_DEFAULT;\n  }\n\n  detectSelfCancelLoop(performType, parent) {\n    if (performType !== PERFORM_TYPE_DEFAULT) {\n      return;\n    }\n\n    let parentCancelRequest = parent.executor && parent.executor.cancelRequest;\n\n    // Detect that the parent was cancelled by a lifespan ending and\n    // that the child is still running and not cancelled.\n    if (\n      parentCancelRequest &&\n      parentCancelRequest.kind === CANCEL_KIND_LIFESPAN_END &&\n      !this.cancelRequest &&\n      !this.state.isFinished\n    ) {\n      this.taskInstance.selfCancelLoopWarning(parent);\n    }\n  }\n}\n"],"names":["PERFORM_TYPE_DEFAULT","PERFORM_TYPE_UNLINKED","PERFORM_TYPE_LINKED","CANCEL_RETURN_VALUE_SENTINEL","TASK_INSTANCE_STACK","getRunningInstance","length","TaskInstanceExecutor","constructor","generatorFactory","env","debug","generatorState","GeneratorState","state","Object","assign","INITIAL_STATE","index","disposers","finalizeCallbacks","cancelRequest","start","hasStarted","setState","proceedSync","YIELDABLE_CONTINUE","undefined","taskInstance","onStarted","cancel","requestCancel","finalize","promise","proceedWithCancelAsync","finalizeWithCancel","proceedChecked","yieldResumeType","value","isFinished","advanceIndex","YIELDABLE_CANCEL","CancelRequest","CANCEL_KIND_YIELDABLE_CANCEL","proceedAsync","YIELDABLE_RETURN","async","dispose","done","handleResolvedReturnedValue","handleResolvedContinueValue","iteratorMethod","resumeValue","beforeIndex","stepResult","generatorStep","errored","COMPLETION_ERROR","handleYieldedValue","COMPLETION_SUCCESS","YIELDABLE_THROW","handleYieldedUnknownThenable","thenable","resumeIndex","then","error","yieldedValue","proceedWithSimpleValue","addDisposer","cancelableSymbol","yieldableSymbol","invokeYieldable","maybeDisposer","push","forEach","disposer","nextValue","step","pop","_expectsLinkedYield","performType","console","warn","maybeResolveDefer","defer","completionState","resolve","reject","onFinalize","callback","runFinalizeCallbacks","cb","maybeThrowUnhandledTaskErrorLater","asyncErrorsHandled","didCancel","reportUncaughtRejection","request","isSuccessful","isError","COMPLETION_CANCEL","finalizeShared","cancelReason","formatCancelReason","reason","Error","debugEnabled","log","name","TASK_CANCELATION_NAME","isCanceled","globalDebuggingEnabled","dispatchFinalizeEvents","onSuccess","onError","onCancel","e","onYielded","parent","proceed","getPerformType","detectSelfCancelLoop","CANCEL_KIND_PARENT_CANCEL","parentCancelRequest","executor","kind","CANCEL_KIND_LIFESPAN_END","selfCancelLoopWarning"],"mappings":"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"}