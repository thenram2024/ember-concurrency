{"version":3,"file":"wait-for.js","sources":["../../src/-private/wait-for.js"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { schedule, cancel } from '@ember/runloop';\nimport { get } from '@ember/object';\nimport { addObserver, removeObserver } from '@ember/object/observers';\nimport { EmberYieldable, isEventedObject } from './utils';\n\nclass WaitForQueueYieldable extends EmberYieldable {\n  constructor(queueName) {\n    super();\n    this.queueName = queueName;\n  }\n\n  onYield(state) {\n    let timerId;\n\n    try {\n      timerId = schedule(this.queueName, () => state.next());\n    } catch (error) {\n      state.throw(error);\n    }\n\n    return () => cancel(timerId);\n  }\n}\n\nclass WaitForEventYieldable extends EmberYieldable {\n  constructor(object, eventName) {\n    super();\n    this.object = object;\n    this.eventName = eventName;\n    this.usesDOMEvents = false;\n  }\n\n  on(callback) {\n    if (typeof this.object.addEventListener === 'function') {\n      // assume that we're dealing with a DOM `EventTarget`.\n      this.usesDOMEvents = true;\n      this.object.addEventListener(this.eventName, callback);\n    } else {\n      this.object.on(this.eventName, callback);\n    }\n  }\n\n  off(callback) {\n    if (this.usesDOMEvents) {\n      this.object.removeEventListener(this.eventName, callback);\n    } else {\n      this.object.off(this.eventName, callback);\n    }\n  }\n\n  onYield(state) {\n    let fn = null;\n    let disposer = () => {\n      fn && this.off(fn);\n      fn = null;\n    };\n\n    fn = (event) => {\n      disposer();\n      state.next(event);\n    };\n\n    this.on(fn);\n\n    return disposer;\n  }\n}\n\nclass WaitForPropertyYieldable extends EmberYieldable {\n  constructor(object, key, predicateCallback = Boolean) {\n    super();\n    this.object = object;\n    this.key = key;\n\n    if (typeof predicateCallback === 'function') {\n      this.predicateCallback = predicateCallback;\n    } else {\n      this.predicateCallback = (v) => v === predicateCallback;\n    }\n  }\n\n  onYield(state) {\n    let observerBound = false;\n    let observerFn = () => {\n      let value = get(this.object, this.key);\n      let predicateValue = this.predicateCallback(value);\n      if (predicateValue) {\n        state.next(value);\n        return true;\n      }\n    };\n\n    if (!observerFn()) {\n      // eslint-disable-next-line ember/no-observers\n      addObserver(this.object, this.key, null, observerFn);\n      observerBound = true;\n    }\n\n    return () => {\n      if (observerBound && observerFn) {\n        removeObserver(this.object, this.key, null, observerFn);\n      }\n    };\n  }\n}\n\n/**\n * Use `waitForQueue` to pause the task until a certain run loop queue is reached.\n *\n * ```js\n * import { task, waitForQueue } from 'ember-concurrency';\n * export default class MyComponent extends Component {\n *   &#64;task *myTask() {\n *     yield waitForQueue('afterRender');\n *     console.log(\"now we're in the afterRender queue\");\n *   }\n * }\n * ```\n *\n * @param {string} queueName the name of the Ember run loop queue\n */\nexport function waitForQueue(queueName) {\n  return new WaitForQueueYieldable(queueName);\n}\n\n/**\n * Use `waitForEvent` to pause the task until an event is fired. The event\n * can either be a jQuery event or an Ember.Evented event (or any event system\n * where the object supports `.on()` `.one()` and `.off()`).\n *\n * ```js\n * import { task, waitForEvent } from 'ember-concurrency';\n * export default class MyComponent extends Component {\n *   &#64;task *myTask() {\n *     console.log(\"Please click anywhere..\");\n *     let clickEvent = yield waitForEvent($('body'), 'click');\n *     console.log(\"Got event\", clickEvent);\n *\n *     let emberEvent = yield waitForEvent(this, 'foo');\n *     console.log(\"Got foo event\", emberEvent);\n *\n *     // somewhere else: component.trigger('foo', { value: 123 });\n *   }\n * }\n * ```\n *\n * @param {object} object the Ember Object, jQuery element, or other object with .on() and .off() APIs\n *                 that the event fires from\n * @param {function} eventName the name of the event to wait for\n */\nexport function waitForEvent(object, eventName) {\n  assert(\n    `${object} must include Ember.Evented (or support \\`.on()\\` and \\`.off()\\`) or DOM EventTarget (or support \\`addEventListener\\` and  \\`removeEventListener\\`) to be able to use \\`waitForEvent\\``,\n    isEventedObject(object),\n  );\n  return new WaitForEventYieldable(object, eventName);\n}\n\n/**\n * Use `waitForProperty` to pause the task until a property on an object\n * changes to some expected value. This can be used for a variety of use\n * cases, including synchronizing with another task by waiting for it\n * to become idle, or change state in some other way. If you omit the\n * callback, `waitForProperty` will resume execution when the observed\n * property becomes truthy. If you provide a callback, it'll be called\n * immediately with the observed property's current value, and multiple\n * times thereafter whenever the property changes, until you return\n * a truthy value from the callback, or the current task is canceled.\n * You can also pass in a non-Function value in place of the callback,\n * in which case the task will continue executing when the property's\n * value becomes the value that you passed in.\n *\n * ```js\n * import { task, waitForProperty } from 'ember-concurrency';\n * export default class MyComponent extends Component {\n *   &#64;tracked foo = 0;\n *\n *   &#64;task *myTask() {\n *     console.log(\"Waiting for `foo` to become 5\");\n *\n *     yield waitForProperty(this, 'foo', v => v === 5);\n *     // alternatively: yield waitForProperty(this, 'foo', 5);\n *\n *     // somewhere else: this.foo = 5;\n *\n *     console.log(\"`foo` is 5!\");\n *\n *     // wait for another task to be idle before running:\n *     yield waitForProperty(this, 'otherTask.isIdle');\n *     console.log(\"otherTask is idle!\");\n *   }\n * }\n * ```\n *\n * @param {object} object an object (most likely an Ember Object)\n * @param {string} key the property name that is observed for changes\n * @param {function} callbackOrValue a Function that should return a truthy value\n *                                   when the task should continue executing, or\n *                                   a non-Function value that the watched property\n *                                   needs to equal before the task will continue running\n */\nexport function waitForProperty(object, key, predicateCallback) {\n  return new WaitForPropertyYieldable(object, key, predicateCallback);\n}\n"],"names":["WaitForQueueYieldable","EmberYieldable","constructor","queueName","onYield","state","timerId","schedule","next","error","throw","cancel","WaitForEventYieldable","object","eventName","usesDOMEvents","on","callback","addEventListener","off","removeEventListener","fn","disposer","event","WaitForPropertyYieldable","key","predicateCallback","Boolean","v","observerBound","observerFn","value","get","predicateValue","addObserver","removeObserver","waitForQueue","waitForEvent","assert","isEventedObject","waitForProperty"],"mappings":"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,IAAA,IAAI,CAACD,UAAU,EAAE,EAAE;AACjB;AACAI,MAAAA,WAAW,CAAC,IAAI,CAACrB,MAAM,EAAE,IAAI,CAACY,GAAG,EAAE,IAAI,EAAEK,UAAU,CAAC,CAAA;AACpDD,MAAAA,aAAa,GAAG,IAAI,CAAA;AACtB,KAAA;AAEA,IAAA,OAAO,MAAM;MACX,IAAIA,aAAa,IAAIC,UAAU,EAAE;AAC/BK,QAAAA,cAAc,CAAC,IAAI,CAACtB,MAAM,EAAE,IAAI,CAACY,GAAG,EAAE,IAAI,EAAEK,UAAU,CAAC,CAAA;AACzD,OAAA;KACD,CAAA;AACH,GAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASM,YAAYA,CAACjC,SAAS,EAAE;AACtC,EAAA,OAAO,IAAIH,qBAAqB,CAACG,SAAS,CAAC,CAAA;AAC7C,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASkC,YAAYA,CAACxB,MAAM,EAAEC,SAAS,EAAE;EAC9CwB,MAAM,CACH,GAAEzB,MAAO,CAAA,sLAAA,CAAuL,EACjM0B,eAAe,CAAC1B,MAAM,CACxB,CAAC,CAAA;AACD,EAAA,OAAO,IAAID,qBAAqB,CAACC,MAAM,EAAEC,SAAS,CAAC,CAAA;AACrD,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS0B,eAAeA,CAAC3B,MAAM,EAAEY,GAAG,EAAEC,iBAAiB,EAAE;EAC9D,OAAO,IAAIF,wBAAwB,CAACX,MAAM,EAAEY,GAAG,EAAEC,iBAAiB,CAAC,CAAA;AACrE;;;;"}