{"version":3,"file":"task-instance.js","sources":["../../src/-private/task-instance.js"],"sourcesContent":["import { BaseTaskInstance } from './external/task-instance/base';\nimport { TRACKED_INITIAL_INSTANCE_STATE } from './tracked-state';\n\n/**\n  A `TaskInstance` represent a single execution of a\n  {@linkcode Task}. Every call to {@linkcode Task#perform} returns\n  a `TaskInstance`.\n\n  `TaskInstance`s are cancelable, either explicitly\n  via {@linkcode TaskInstance#cancel} or {@linkcode Task#cancelAll},\n  or automatically due to the host object being destroyed, or\n  because concurrency policy enforced by a\n  {@linkcode TaskProperty Task Modifier} canceled the task instance.\n\n  <style>\n    .ignore-this--this-is-here-to-hide-constructor,\n    #TaskInstance { display: none }\n  </style>\n\n  @class TaskInstance\n*/\n\nexport class TaskInstance extends BaseTaskInstance {\n  setState(props) {\n    let state = this._recomputeState(props);\n    Object.assign(this, {\n      ...props,\n      isRunning: !props.isFinished,\n      isDropped: state === 'dropped',\n      state,\n    });\n  }\n\n  _recomputeState(props) {\n    if (props.isDropped) {\n      return 'dropped';\n    } else if (props.isCanceled) {\n      if (props.hasStarted) {\n        return 'canceled';\n      } else {\n        return 'dropped';\n      }\n    } else if (props.isFinished) {\n      return 'finished';\n    } else if (props.hasStarted) {\n      return 'running';\n    } else {\n      return 'waiting';\n    }\n  }\n\n  onStarted() {\n    this.triggerEvent('started', this);\n  }\n\n  onSuccess() {\n    this.triggerEvent('succeeded', this);\n  }\n\n  onError(error) {\n    this.triggerEvent('errored', this, error);\n  }\n\n  onCancel(cancelReason) {\n    this.triggerEvent('canceled', this, cancelReason);\n  }\n\n  formatCancelReason(reason) {\n    return `TaskInstance '${this.getName()}' was canceled because ${reason}. For more information, see: http://ember-concurrency.com/docs/task-cancelation-help`;\n  }\n\n  getName() {\n    if (!this.name) {\n      this.name = (this.task && this.task.name) || '<unknown>';\n    }\n    return this.name;\n  }\n\n  selfCancelLoopWarning(parent) {\n    let parentName = `\\`${parent.getName()}\\``;\n    let childName = `\\`${this.getName()}\\``;\n    // eslint-disable-next-line no-console\n    console.warn(\n      `ember-concurrency detected a potentially hazardous \"self-cancel loop\" between parent task ${parentName} and child task ${childName}. If you want child task ${childName} to be canceled when parent task ${parentName} is canceled, please change \\`.perform()\\` to \\`.linked().perform()\\`. If you want child task ${childName} to keep running after parent task ${parentName} is canceled, change it to \\`.unlinked().perform()\\``,\n    );\n  }\n\n  triggerEvent(...allArgs) {\n    if (!this.hasEnabledEvents) {\n      return;\n    }\n\n    let taskInstance = this;\n    let task = taskInstance.task;\n    let host = task.context;\n    let eventNamespace = task && task.name;\n\n    if (host && host.trigger && eventNamespace) {\n      let [eventType, ...args] = allArgs;\n      host.trigger(`${eventNamespace}:${eventType}`, ...args);\n    }\n  }\n\n  /**\n   * Describes the state that the task instance is in. Can be used for debugging,\n   * or potentially driving some UI state. Possible values are:\n   *\n   * - `\"dropped\"`: task instance was canceled before it started\n   * - `\"canceled\"`: task instance was canceled before it could finish\n   * - `\"finished\"`: task instance ran to completion (even if an exception was thrown)\n   * - `\"running\"`: task instance is currently running (returns true even if\n   *     is paused on a yielded promise)\n   * - `\"waiting\"`: task instance hasn't begun running yet (usually\n   *     because the task is using the {@linkcode TaskProperty#enqueue enqueue}\n   *     task modifier)\n   *\n   * The animated timeline examples on the [Task Concurrency](/docs/task-concurrency)\n   * docs page make use of this property.\n   *\n   * @name state\n   * @memberof TaskInstance\n   * @instance\n   * @readOnly\n   */\n\n  /**\n   * True if the TaskInstance was canceled before it could\n   * ever start running. For example, calling\n   * {@linkcode Task#perform .perform()} twice on a\n   * task with the {@linkcode TaskProperty#drop drop} modifier applied\n   * will result in the second task instance being dropped.\n   *\n   * @name isDropped\n   * @memberof TaskInstance\n   * @instance\n   * @readOnly\n   */\n\n  /**\n   * True if the task is still running.\n   *\n   * @name isRunning\n   * @memberof TaskInstance\n   * @instance\n   * @readOnly\n   */\n\n  /**\n   * Event emitted when a new {@linkcode TaskInstance} starts executing.\n   *\n   * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.\n   *\n   * ```js\n   * export default Component.extend({\n   *   doSomething: task(function * () {\n   *     // ... does something\n   *   }),\n   *\n   *   onDoSomethingStarted: on('doSomething:started', function (taskInstance) {\n   *     // ...\n   *   })\n   * });\n   * ```\n   *\n   * @event TaskInstance#TASK_NAME:started\n   * @param {TaskInstance} taskInstance - Task instance that was started\n   */\n\n  /**\n   * Event emitted when a {@linkcode TaskInstance} succeeds.\n   *\n   * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.\n   *\n   * ```js\n   * export default Component.extend({\n   *   doSomething: task(function * () {\n   *     // ... does something\n   *   }),\n   *\n   *   onDoSomethingSucceeded: on('doSomething:succeeded', function (taskInstance) {\n   *     // ...\n   *   })\n   * });\n   * ```\n   *\n   * @event TaskInstance#TASK_NAME:succeeded\n   * @param {TaskInstance} taskInstance - Task instance that was succeeded\n   */\n\n  /**\n   * Event emitted when a {@linkcode TaskInstance} throws an an error that is\n   * not handled within the task itself.\n   *\n   * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.\n   *\n   * ```js\n   * export default Component.extend({\n   *   doSomething: task(function * () {\n   *     // ... does something\n   *   }),\n   *\n   *   onDoSomethingErrored: on('doSomething:errored', function (taskInstance, error) {\n   *     // ...\n   *   })\n   * });\n   * ```\n   *\n   * @event TaskInstance#TASK_NAME:errored\n   * @param {TaskInstance} taskInstance - Task instance that was started\n   * @param {Error} error - Error that was thrown by the task instance\n   */\n\n  /**\n   * Event emitted when a {@linkcode TaskInstance} is canceled.\n   *\n   * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.\n   *\n   * ```js\n   * export default Component.extend({\n   *   doSomething: task(function * () {\n   *     // ... does something\n   *   }),\n   *\n   *   onDoSomethingCanceled: on('doSomething:canceled', function (taskInstance, cancelationReason) {\n   *     // ...\n   *   })\n   * });\n   * ```\n   *\n   * @event TaskInstance#TASK_NAME:canceled\n   * @param {TaskInstance} taskInstance - Task instance that was started\n   * @param {string} cancelationReason - Cancelation reason that was was provided to {@linkcode TaskInstance#cancel}\n   */\n\n  /**\n   * Cancels the task instance. Has no effect if the task instance has\n   * already been canceled or has already finished running.\n   *\n   * @method cancel\n   * @memberof TaskInstance\n   * @instance\n   * @async\n   */\n\n  /**\n   * Returns a promise that resolves with the value returned\n   * from the task's (generator) function, or rejects with\n   * either the exception thrown from the task function, or\n   * an error with a `.name` property with value `\"TaskCancelation\"`.\n   *\n   * @method then\n   * @memberof TaskInstance\n   * @instance\n   * @return {Promise}\n   */\n\n  /**\n   * @method catch\n   * @memberof TaskInstance\n   * @instance\n   * @return {Promise}\n   */\n\n  /**\n   * @method finally\n   * @memberof TaskInstance\n   * @instance\n   * @return {Promise}\n   */\n}\n\nif (TRACKED_INITIAL_INSTANCE_STATE) {\n  Object.defineProperties(\n    TaskInstance.prototype,\n    TRACKED_INITIAL_INSTANCE_STATE,\n  );\n}\n"],"names":["TaskInstance","BaseTaskInstance","setState","props","state","_recomputeState","Object","assign","isRunning","isFinished","isDropped","isCanceled","hasStarted","onStarted","triggerEvent","onSuccess","onError","error","onCancel","cancelReason","formatCancelReason","reason","getName","name","task","selfCancelLoopWarning","parent","parentName","childName","console","warn","allArgs","hasEnabledEvents","taskInstance","host","context","eventNamespace","trigger","eventType","args","TRACKED_INITIAL_INSTANCE_STATE","defineProperties","prototype"],"mappings":"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ACG,OAAO,CAAE,CAAED,EAAAA,cAAe,CAAGE,CAAAA,EAAAA,SAAU,CAAC,CAAA,EAAE,GAAGC,IAAI,CAAC,CAAA;AACzD,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA,CAAA;AAEA,IAAIC,8BAA8B,EAAE;EAClClC,MAAM,CAACmC,gBAAgB,CACrBzC,YAAY,CAAC0C,SAAS,EACtBF,8BACF,CAAC,CAAA;AACH;;;;"}