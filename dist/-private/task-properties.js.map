{"version":3,"file":"task-properties.js","sources":["../../src/-private/task-properties.js"],"sourcesContent":["import Ember from 'ember';\n\nimport { computed } from '@ember/object';\n\nimport EnqueueSchedulerPolicy from './external/scheduler/policies/enqueued-policy';\nimport DropSchedulerPolicy from './external/scheduler/policies/drop-policy';\nimport KeepLatestSchedulerPolicy from './external/scheduler/policies/keep-latest-policy';\nimport RestartableSchedulerPolicy from './external/scheduler/policies/restartable-policy';\n\nexport let taskFactorySymbol = '__ec_task_factory';\n\nexport const propertyModifiers = {\n  /**\n   * Configures the task to cancel old currently task instances\n   * to make room for a new one to perform. Sets default\n   * maxConcurrency to 1.\n   *\n   * [See the Live Example](/docs/examples/route-tasks/1)\n   *\n   * @method restartable\n   * @memberof TaskProperty\n   * @instance\n   */\n  restartable() {\n    this[taskFactorySymbol].setBufferPolicy(RestartableSchedulerPolicy);\n    return this;\n  },\n\n  /**\n   * Configures the task to run task instances one-at-a-time in\n   * the order they were `.perform()`ed. Sets default\n   * maxConcurrency to 1.\n   *\n   * @method enqueue\n   * @memberof TaskProperty\n   * @instance\n   */\n  enqueue() {\n    this[taskFactorySymbol].setBufferPolicy(EnqueueSchedulerPolicy);\n    return this;\n  },\n\n  /**\n   * Configures the task to immediately cancel (i.e. drop) any\n   * task instances performed when the task is already running\n   * at maxConcurrency. Sets default maxConcurrency to 1.\n   *\n   * @method drop\n   * @memberof TaskProperty\n   * @instance\n   */\n  drop() {\n    this[taskFactorySymbol].setBufferPolicy(DropSchedulerPolicy);\n    return this;\n  },\n\n  /**\n   * Configures the task to drop all but the most recently\n   * performed {@linkcode TaskInstance }.\n   *\n   * @method keepLatest\n   * @memberof TaskProperty\n   * @instance\n   */\n  keepLatest() {\n    this[taskFactorySymbol].setBufferPolicy(KeepLatestSchedulerPolicy);\n    return this;\n  },\n\n  /**\n   * Sets the maximum number of task instances that are allowed\n   * to run at the same time. By default, with no task modifiers\n   * applied, this number is Infinity (there is no limit\n   * to the number of tasks that can run at the same time).\n   * {@linkcode TaskProperty#restartable .restartable},\n   * {@linkcode TaskProperty#enqueue .enqueue}, and\n   * {@linkcode TaskProperty#drop .drop} set the default\n   * maxConcurrency to 1, but you can override this value\n   * to set the maximum number of concurrently running tasks\n   * to a number greater than 1.\n   *\n   * [See the AJAX Throttling example](/docs/examples/ajax-throttling)\n   *\n   * The example below uses a task with `maxConcurrency(3)` to limit\n   * the number of concurrent AJAX requests (for anyone using this task)\n   * to 3.\n   *\n   * ```js\n   * doSomeAjax: task(function * (url) {\n   *   return fetch(url);\n   * }).maxConcurrency(3),\n   *\n   * elsewhere() {\n   *   this.doSomeAjax.perform(\"http://www.example.com/json\");\n   * },\n   * ```\n   *\n   * @method maxConcurrency\n   * @memberof TaskProperty\n   * @param {Number} n The maximum number of concurrently running tasks\n   * @instance\n   */\n  maxConcurrency(n) {\n    this[taskFactorySymbol].setMaxConcurrency(n);\n    return this;\n  },\n\n  /**\n   * Adds this task to a TaskGroup so that concurrency constraints\n   * can be shared between multiple tasks.\n   *\n   * [See the Task Group docs for more information](/docs/task-groups)\n   *\n   * @method group\n   * @memberof TaskProperty\n   * @param {String} groupPath A path to the TaskGroup property\n   * @instance\n   */\n  group(taskGroupPath) {\n    this[taskFactorySymbol].setGroup(taskGroupPath);\n    return this;\n  },\n\n  /**\n   * Activates lifecycle events, allowing Evented host objects to react to task state\n   * changes.\n   *\n   * ```js\n   *\n   * export default Component.extend({\n   *   uploadTask: task(function* (file) {\n   *     // ... file upload stuff\n   *   }).evented(),\n   *\n   *   uploadedStarted: on('uploadTask:started', function(taskInstance) {\n   *     this.analytics.track(\"User Photo: upload started\");\n   *   }),\n   * });\n   * ```\n   *\n   * @method evented\n   * @memberof TaskProperty\n   * @instance\n   */\n  evented() {\n    this[taskFactorySymbol].setEvented(true);\n    return this;\n  },\n\n  /**\n   * Logs lifecycle events to aid in debugging unexpected Task behavior.\n   * Presently only logs cancelation events and the reason for the cancelation,\n   * e.g. \"TaskInstance 'doStuff' was canceled because the object it lives on was destroyed or unrendered\"\n   *\n   * @method debug\n   * @memberof TaskProperty\n   * @instance\n   */\n  debug() {\n    this[taskFactorySymbol].setDebug(true);\n    return this;\n  },\n\n  /**\n   * Configures the task to call the passed in callback for derived state updates,\n   * overriding the default derived state tracking. You may call with `null` to\n   * completely opt-out of derived state tracking.\n   *\n   * @method onState\n   * @memberof TaskProperty\n   * @param {function?} callback Callback to be called. Receives an object argument with the new state.\n   * @instance\n   */\n  onState(callback) {\n    this[taskFactorySymbol].setOnState(callback);\n    return this;\n  },\n};\n\n/**\n  A {@link TaskProperty} is the Computed Property-like object returned\n  from the {@linkcode task} function. You can call Task Modifier methods\n  on this object to configure the behavior of the {@link Task}.\n\n  See [Managing Task Concurrency](/docs/task-concurrency) for an\n  overview of all the different task modifiers you can use and how\n  they impact automatic cancelation / enqueueing of task instances.\n\n  {@link TaskProperty} is only used for supporting \"classic\" Ember objects.\n  When using Native JavaScript or TypeScript classes, you will use [task decorators](/docs/task-decorators)\n  on methods instead.\n\n  @class TaskProperty\n*/\nexport class TaskProperty {}\nexport class TaskGroupProperty {}\n\nObject.assign(TaskGroupProperty.prototype, propertyModifiers);\nObject.assign(TaskProperty.prototype, propertyModifiers, {\n  setup(proto, key) {\n    if (this.callSuperSetup) {\n      this.callSuperSetup(...arguments);\n    }\n\n    this[taskFactorySymbol].setName(key);\n    this[taskFactorySymbol]._setupEmberKVO(proto);\n  },\n\n  /**\n   * Calling `task(...).on(eventName)` configures the task to be\n   * automatically performed when the specified events fire. In\n   * this way, it behaves like\n   * [Ember.on](http://emberjs.com/api/classes/Ember.html#method_on).\n   *\n   * You can use `task(...).on('init')` to perform the task\n   * when the host object is initialized.\n   *\n   * ```js\n   * export default Component.extend({\n   *   pollForUpdates: task(function * () {\n   *     // ... this runs when the Component is first created\n   *     // because we specified .on('init')\n   *   }).on('init'),\n   *\n   *   handleFoo: task(function * (a, b, c) {\n   *     // this gets performed automatically if the 'foo'\n   *     // event fires on this Component,\n   *     // e.g., if someone called component.trigger('foo')\n   *   }).on('foo'),\n   * });\n   * ```\n   *\n   * @method on\n   * @memberof TaskProperty\n   * @param {String} eventNames*\n   * @instance\n   */\n  on() {\n    this[taskFactorySymbol].addPerformEvents(...arguments);\n    return this;\n  },\n\n  /**\n   * This behaves like the {@linkcode TaskProperty#on task(...).on() modifier},\n   * but instead will cause the task to be canceled if any of the\n   * specified events fire on the parent object.\n   *\n   * [See the Live Example](/docs/examples/route-tasks/1)\n   *\n   * @method cancelOn\n   * @memberof TaskProperty\n   * @param {String} eventNames*\n   * @instance\n   */\n  cancelOn() {\n    this[taskFactorySymbol].addCancelEvents(...arguments);\n    return this;\n  },\n\n  /**\n   * This behaves like the {@linkcode TaskProperty#on task(...).on() modifier},\n   * but instead will cause the task to be performed if any of the\n   * specified properties on the parent object change.\n   *\n   * @method observes\n   * @memberof TaskProperty\n   * @param {String} keys*\n   * @instance\n   */\n  observes() {\n    this[taskFactorySymbol].addObserverKeys(...arguments);\n    return this;\n  },\n});\n\nconst setDecorator = Ember._setClassicDecorator || Ember._setComputedDecorator;\nexport function taskComputed(fn) {\n  let cp = function (proto, key) {\n    if (cp.setup !== undefined) {\n      cp.setup(proto, key);\n    }\n\n    return computed(fn)(...arguments);\n  };\n\n  setDecorator(cp);\n\n  return cp;\n}\n"],"names":["taskFactorySymbol","propertyModifiers","restartable","setBufferPolicy","RestartableSchedulerPolicy","enqueue","EnqueueSchedulerPolicy","drop","DropSchedulerPolicy","keepLatest","KeepLatestSchedulerPolicy","maxConcurrency","n","setMaxConcurrency","group","taskGroupPath","setGroup","evented","setEvented","debug","setDebug","onState","callback","setOnState","TaskProperty","TaskGroupProperty","Object","assign","prototype","setup","proto","key","callSuperSetup","arguments","setName","_setupEmberKVO","on","addPerformEvents","cancelOn","addCancelEvents","observes","addObserverKeys","setDecorator","Ember","_setClassicDecorator","_setComputedDecorator","taskComputed","fn","cp","undefined","computed"],"mappings":";;;;;;;AASO,IAAIA,iBAAiB,GAAG,oBAAmB;AAE3C,MAAMC,iBAAiB,GAAG;AAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAWA,GAAG;AACZ,IAAA,IAAI,CAACF,iBAAiB,CAAC,CAACG,eAAe,CAACC,iBAA0B,CAAC,CAAA;AACnE,IAAA,OAAO,IAAI,CAAA;GACZ;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,OAAOA,GAAG;AACR,IAAA,IAAI,CAACL,iBAAiB,CAAC,CAACG,eAAe,CAACG,cAAsB,CAAC,CAAA;AAC/D,IAAA,OAAO,IAAI,CAAA;GACZ;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAIA,GAAG;AACL,IAAA,IAAI,CAACP,iBAAiB,CAAC,CAACG,eAAe,CAACK,UAAmB,CAAC,CAAA;AAC5D,IAAA,OAAO,IAAI,CAAA;GACZ;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,UAAUA,GAAG;AACX,IAAA,IAAI,CAACT,iBAAiB,CAAC,CAACG,eAAe,CAACO,gBAAyB,CAAC,CAAA;AAClE,IAAA,OAAO,IAAI,CAAA;GACZ;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,cAAcA,CAACC,CAAC,EAAE;AAChB,IAAA,IAAI,CAACZ,iBAAiB,CAAC,CAACa,iBAAiB,CAACD,CAAC,CAAC,CAAA;AAC5C,IAAA,OAAO,IAAI,CAAA;GACZ;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,KAAKA,CAACC,aAAa,EAAE;AACnB,IAAA,IAAI,CAACf,iBAAiB,CAAC,CAACgB,QAAQ,CAACD,aAAa,CAAC,CAAA;AAC/C,IAAA,OAAO,IAAI,CAAA;GAC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"}